{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zacfr\\\\Downloads\\\\AAG_DASH\\\\compressed\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chatbot({\n  onSearch,\n  onMortalitySearch,\n  onHealthIndicatorSearch\n}) {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null); // Auto-scroll to bottom\n\n  useEffect(() => {\n    var _chatContainerRef$cur;\n    (_chatContainerRef$cur = chatContainerRef.current) === null || _chatContainerRef$cur === void 0 ? void 0 : _chatContainerRef$cur.scrollTo({\n      top: chatContainerRef.current.scrollHeight,\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const handleQuery = async () => {\n    if (!query.trim()) return;\n    const newMessages = [...messages, {\n      text: query,\n      type: \"user\"\n    }];\n    setMessages(newMessages);\n    setQuery(\"\");\n    console.log(\"Sending API request...\");\n    try {\n      const res = await fetch(\"http://127.0.0.1:8000/chatbot/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const data = await res.json();\n      console.log(\"API Response:\", data);\n      console.log(\"Map type:\", data.map_type);\n\n      // Check if the response includes specific data (hospitals and boundary)\n      let botResponse = data.response;\n      if (typeof botResponse === \"object\" && botResponse.response) {\n        botResponse = botResponse.response;\n      } else if (typeof botResponse === \"object\") {\n        botResponse = JSON.stringify(botResponse, null, 2);\n      }\n      if (data.hospitals || data.boundary && data.map_type === \"hospital\") {\n        console.log(\"Sending data to map:\", data.hospitals, data.boundary);\n        onSearch(data.hospitals || [], data.boundary || null);\n      }\n      if (data.boundary && data.map_type === \"mortality\") {\n        console.log(\"Updating mortality map:\", data.boundary, data.county_names, data.indicator, data.indicator_value);\n        onMortalitySearch(data.boundary, {\n          county_name: data.county_names,\n          indicator: data.indicator,\n          indicator_value: data.indicator_value\n        });\n      }\n      if (data.boundary && data.map_type === \"healthIndicator\") {\n        console.log(\"Updating health indicator map:\", data.boundary, data.classification_data);\n        onHealthIndicatorSearch(data.boundary, data.healthIndicatorData, data.classification_data);\n      }\n      setMessages([...newMessages, {\n        text: botResponse,\n        type: \"bot\"\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setMessages([...newMessages, {\n        text: \"Error: Unable to reach chatbot\",\n        type: \"bot\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: chatContainerRef,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.type}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Ask about hospitals...\",\n        className: \"chat-input\",\n        onKeyDown: e => {\n          if (e.key === 'Enter') {\n            handleQuery();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleQuery,\n        className: \"chat-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"5fCjJCDn3YLQDHkG6Nd6mJrpVGU=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","Chatbot","onSearch","onMortalitySearch","onHealthIndicatorSearch","_s","query","setQuery","messages","setMessages","chatContainerRef","_chatContainerRef$cur","current","scrollTo","top","scrollHeight","behavior","handleQuery","trim","newMessages","text","type","console","log","res","fetch","method","headers","body","JSON","stringify","data","json","map_type","botResponse","response","hospitals","boundary","county_names","indicator","indicator_value","county_name","classification_data","healthIndicatorData","error","className","children","ref","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/zacfr/Downloads/AAG_DASH/compressed/frontend/src/components/Chatbot.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\nexport default function Chatbot({ onSearch, onMortalitySearch,onHealthIndicatorSearch }) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const chatContainerRef = useRef(null); // Auto-scroll to bottom\r\n\r\n  useEffect(() => {\r\n    chatContainerRef.current?.scrollTo({\r\n      top: chatContainerRef.current.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [messages]);\r\n\r\n  const handleQuery = async () => {\r\n    if (!query.trim()) return;\r\n\r\n    const newMessages = [...messages, { text: query, type: \"user\" }];\r\n    setMessages(newMessages);\r\n    setQuery(\"\");\r\n\r\n    console.log(\"Sending API request...\");\r\n    try {\r\n      const res = await fetch(\"http://127.0.0.1:8000/chatbot/\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ query }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      console.log(\"API Response:\", data);\r\n      console.log(\"Map type:\", data.map_type);\r\n\r\n      // Check if the response includes specific data (hospitals and boundary)\r\n      let botResponse = data.response;\r\nif (typeof botResponse === \"object\" && botResponse.response) {\r\n  botResponse = botResponse.response;\r\n} else if (typeof botResponse === \"object\") {\r\n  botResponse = JSON.stringify(botResponse, null, 2);\r\n}\r\n\r\nif (data.hospitals || (data.boundary && data.map_type === \"hospital\")) {\r\n  console.log(\"Sending data to map:\", data.hospitals, data.boundary);\r\n  onSearch(data.hospitals || [], data.boundary || null);\r\n}\r\n\r\nif (data.boundary && data.map_type === \"mortality\") {\r\n  console.log(\"Updating mortality map:\", data.boundary, data.county_names, data.indicator,data.indicator_value);\r\n  onMortalitySearch(data.boundary, {\r\n    county_name: data.county_names,\r\n    indicator:data.indicator,\r\n    indicator_value:data.indicator_value,\r\n  });\r\n}\r\n\r\nif (data.boundary && data.map_type === \"healthIndicator\") {\r\n  console.log(\"Updating health indicator map:\", data.boundary, data.classification_data);\r\n  onHealthIndicatorSearch(data.boundary, data.healthIndicatorData, data.classification_data);\r\n}\r\n\r\n      setMessages([...newMessages, { text: botResponse, type: \"bot\" }]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chatbot response:\", error);\r\n      setMessages([...newMessages, { text: \"Error: Unable to reach chatbot\", type: \"bot\" }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {/* Chat Messages */}\r\n      <div className=\"chat-messages\" ref={chatContainerRef}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chat-message ${msg.type}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input field & search button */}\r\n      <div className=\"chat-input-container\">\r\n        <input\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"Ask about hospitals...\"\r\n          className=\"chat-input\"\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter') {\r\n              handleQuery();\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={handleQuery} className=\"chat-button\">Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}