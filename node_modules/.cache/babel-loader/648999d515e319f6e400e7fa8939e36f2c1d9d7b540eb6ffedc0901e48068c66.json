{"ast":null,"code":"import{useState,useRef,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Chatbot(_ref){let{onSearch,onMortalitySearch,onHealthIndicatorSearch}=_ref;const[query,setQuery]=useState(\"\");const[messages,setMessages]=useState([]);const chatContainerRef=useRef(null);// Auto-scroll to bottom\nuseEffect(()=>{var _chatContainerRef$cur;(_chatContainerRef$cur=chatContainerRef.current)===null||_chatContainerRef$cur===void 0?void 0:_chatContainerRef$cur.scrollTo({top:chatContainerRef.current.scrollHeight,behavior:\"smooth\"});},[messages]);const handleQuery=async()=>{if(!query.trim())return;const newMessages=[...messages,{text:query,type:\"user\"}];setMessages(newMessages);setQuery(\"\");console.log(\"Sending API request...\");try{const res=await fetch(\"http://127.0.0.1:8000/chatbot/\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query})});const data=await res.json();console.log(\"API Response:\",data);console.log(\"Map type:\",data.map_type);// Check if the response includes specific data (hospitals and boundary)\nlet botResponse=data.response;if(typeof botResponse===\"object\"&&botResponse.response){botResponse=botResponse.response;}else if(typeof botResponse===\"object\"){botResponse=JSON.stringify(botResponse,null,2);}if(data.hospitals||data.boundary&&data.map_type===\"hospital\"){console.log(\"Sending data to map:\",data.hospitals,data.boundary);onSearch(data.hospitals||[],data.boundary||null);}if(data.boundary&&data.map_type===\"mortality\"){console.log(\"Updating mortality map:\",data.boundary,data.county_names,data.indicator,data.indicator_value);onMortalitySearch(data.boundary,{county_name:data.county_names,indicator:data.indicator,indicator_value:data.indicator_value});}if(data.boundary&&data.map_type===\"healthIndicator\"){console.log(\"Updating health indicator map:\",data.boundary,data.classification_data);onHealthIndicatorSearch(data.boundary,data.healthIndicatorData,data.classification_data);}setMessages([...newMessages,{text:botResponse,type:\"bot\"}]);}catch(error){console.error(\"Error fetching chatbot response:\",error);setMessages([...newMessages,{text:\"Error: Unable to reach chatbot\",type:\"bot\"}]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",ref:chatContainerRef,children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:`chat-message ${msg.type}`,children:msg.text},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{value:query,onChange:e=>setQuery(e.target.value),placeholder:\"Ask about hospitals...\",className:\"chat-input\",onKeyDown:e=>{if(e.key==='Enter'){handleQuery();}}}),/*#__PURE__*/_jsx(\"button\",{onClick:handleQuery,className:\"chat-button\",children:\"Send\"})]})]});}","map":{"version":3,"names":["useState","useRef","useEffect","jsx","_jsx","jsxs","_jsxs","Chatbot","_ref","onSearch","onMortalitySearch","onHealthIndicatorSearch","query","setQuery","messages","setMessages","chatContainerRef","_chatContainerRef$cur","current","scrollTo","top","scrollHeight","behavior","handleQuery","trim","newMessages","text","type","console","log","res","fetch","method","headers","body","JSON","stringify","data","json","map_type","botResponse","response","hospitals","boundary","county_names","indicator","indicator_value","county_name","classification_data","healthIndicatorData","error","className","children","ref","map","msg","index","value","onChange","e","target","placeholder","onKeyDown","key","onClick"],"sources":["C:/Users/zacfr/Downloads/AAG_DASH/compressed/frontend/src/components/Chatbot.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\n\r\nexport default function Chatbot({ onSearch, onMortalitySearch,onHealthIndicatorSearch }) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const chatContainerRef = useRef(null); // Auto-scroll to bottom\r\n\r\n  useEffect(() => {\r\n    chatContainerRef.current?.scrollTo({\r\n      top: chatContainerRef.current.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [messages]);\r\n\r\n  const handleQuery = async () => {\r\n    if (!query.trim()) return;\r\n\r\n    const newMessages = [...messages, { text: query, type: \"user\" }];\r\n    setMessages(newMessages);\r\n    setQuery(\"\");\r\n\r\n    console.log(\"Sending API request...\");\r\n    try {\r\n      const res = await fetch(\"http://127.0.0.1:8000/chatbot/\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ query }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      console.log(\"API Response:\", data);\r\n      console.log(\"Map type:\", data.map_type);\r\n\r\n      // Check if the response includes specific data (hospitals and boundary)\r\n      let botResponse = data.response;\r\nif (typeof botResponse === \"object\" && botResponse.response) {\r\n  botResponse = botResponse.response;\r\n} else if (typeof botResponse === \"object\") {\r\n  botResponse = JSON.stringify(botResponse, null, 2);\r\n}\r\n\r\nif (data.hospitals || (data.boundary && data.map_type === \"hospital\")) {\r\n  console.log(\"Sending data to map:\", data.hospitals, data.boundary);\r\n  onSearch(data.hospitals || [], data.boundary || null);\r\n}\r\n\r\nif (data.boundary && data.map_type === \"mortality\") {\r\n  console.log(\"Updating mortality map:\", data.boundary, data.county_names, data.indicator,data.indicator_value);\r\n  onMortalitySearch(data.boundary, {\r\n    county_name: data.county_names,\r\n    indicator:data.indicator,\r\n    indicator_value:data.indicator_value,\r\n  });\r\n}\r\n\r\nif (data.boundary && data.map_type === \"healthIndicator\") {\r\n  console.log(\"Updating health indicator map:\", data.boundary, data.classification_data);\r\n  onHealthIndicatorSearch(data.boundary, data.healthIndicatorData, data.classification_data);\r\n}\r\n\r\n      setMessages([...newMessages, { text: botResponse, type: \"bot\" }]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chatbot response:\", error);\r\n      setMessages([...newMessages, { text: \"Error: Unable to reach chatbot\", type: \"bot\" }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      {/* Chat Messages */}\r\n      <div className=\"chat-messages\" ref={chatContainerRef}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`chat-message ${msg.type}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input field & search button */}\r\n      <div className=\"chat-input-container\">\r\n        <input\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          placeholder=\"Ask about hospitals...\"\r\n          className=\"chat-input\"\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter') {\r\n              handleQuery();\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={handleQuery} className=\"chat-button\">Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}